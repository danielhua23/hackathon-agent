[{"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            The provided Triton operator code implements a matrix-vector multiplication kernel, `mv_kernel`, designed for efficient execution on NVIDIA GPUs. It leverages Triton's Just-In-Time (JIT) compilation and auto-tuning features. The kernel function multiplies a matrix `A` of size N x M with a vector `B` of size M, resulting in an output vector `C` of size N. The kernel is parameterized by constants `BLOCK_N` and `BLOCK_M` which determine the tile sizes for the computation, allowing for optimal parallel processing. Within `mv_kernel`, a loop iterates over the matrix A in blocks of `BLOCK_M` to load sub-matrices and the corresponding block from vector B, performing element-wise multiplication and accumulation in shared memory. The partial results are then reduced along the rows and stored in the output vector `C`. The `mv` function wraps this kernel execution, asserting dimension compatibility and managing CUDA resources for launching the kernel with calculated grid dimensions.\n            ", "label": null, "file": "matrix_vector_multip.py", "test_code": "\n\n\ndef test_mv():\n    # \u6d4b\u8bd5\u7528\u4f8b 2: 4x3 \u77e9\u9635\u4e0e 3x1 \u5411\u91cf\u76f8\u4e58\n    A = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0]], device='cuda')\n    B = torch.tensor([1.0, 2.0, 3.0], device='cuda')\n    triton_result_2 = mv(A, B)\n\n    # \u6d4b\u8bd5\u7528\u4f8b 3: 32x16 \u77e9\u9635\u4e0e 16x1 \u5411\u91cf\u76f8\u4e58\n    A = torch.randn(32, 16, device='cuda')\n    B = torch.randn(16, device='cuda')\n    triton_result_3 = mv(A, B)\n\n    return {\n        \"test_case_2\": triton_result_2,\n        \"test_case_3\": triton_result_3,\n    }\n\nresult_gold = test_mv()\n", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef mv_kernel(A, B, C, stride_am: tl.constexpr, stride_ak: tl.constexpr,\n              stride_bk: tl.constexpr, stride_cm: tl.constexpr,\n              N: int, M: int, BLOCK_N: tl.constexpr, BLOCK_M: tl.constexpr):\n    pid_n = tl.program_id(0)          # one program per N-tile\n    start_n = pid_n * BLOCK_N\n    offsets_n = start_n + tl.arange(0, BLOCK_N)\n    mask_n = offsets_n < N\n\n    # allocate register tile\n    accum = tl.zeros((BLOCK_N,), dtype=tl.float32)\n\n    for start_m in range(0, M, BLOCK_M):\n        offsets_m = start_m + tl.arange(0, BLOCK_M)\n        mask_m = offsets_m < M\n        # A tile: [BLOCK_N, BLOCK_M]\n        offs_a = A + (offsets_n[:, None] * stride_am +\n                      offsets_m[None, :] * stride_ak)\n        tile_a = tl.load(offs_a, mask=mask_n[:, None] & mask_m[None, :], other=0.0)\n        # B segment: [BLOCK_M]\n        offs_b = B + offsets_m * stride_bk\n        seg_b  = tl.load(offs_b, mask=mask_m, other=0.0)\n\n        accum += tl.sum(tile_a * seg_b[None, :], axis=1)\n\n    # write back\n    offs_c = C + offsets_n * stride_cm\n    tl.store(offs_c, accum, mask=mask_n)\n\ndef mv(A: torch.Tensor, B: torch.Tensor) -> torch.Tensor:\n    assert A.dtype == B.dtype\n    assert A.size(1) == B.size(0)\n    N, M = A.shape\n    C = torch.empty((N,), dtype=A.dtype, device=A.device)\n    BLOCK_N = 128\n    BLOCK_M = 64\n    grid = (triton.cdiv(N, BLOCK_N),)\n    mv_kernel[grid](\n        A, B, C,\n        stride_am=A.stride(0), stride_ak=A.stride(1),\n        stride_bk=B.stride(0), stride_cm=C.stride(0),\n        N=N, M=M,\n        BLOCK_N=BLOCK_N, BLOCK_M=BLOCK_M\n    )\n    return C\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n        The provided Triton kernel, `matmul_kernel`, is a specialized GPU matrix multiplication operation. \n        It employs a blocked tiling strategy for efficient computation of the result matrix `c` from input matrices `a` and `b`. \n        Within this kernel, operations are parallelized across blocks defined by BLOCK_SIZE_M, BLOCK_SIZE_N, and BLOCK_SIZE_K. \n        These blocks allow the kernel to load sub-matrices, perform computations, and manage memory more efficiently.\n\n        The kernel begins by computing indices for thread execution, segmenting the operation across various program IDs derived from the grid dimensions. \n        For each thread block, it computes offsets `offs_am`, `offs_bn`, and `offs_k` to read data from the input matrices.\n\n        In a loop iterating over slices of the K dimension, sub-matrices are loaded using `tl.load` with masks to handle boundary conditions. \n        These matrices are then multiplied using `tl.dot`, accumulating results in a local accumulator. \n        Memory access patterns are optimized using `tl.max_contiguous` and `tl.multiple_of` to align data in cache-friendly ways.\n\n        The function finally writes the accumulated results to the output matrix `c`, with care taken to respect bounds and using conditional storage via `tl.store`.\n\n        The `matmul` function wraps this kernel, preparing inputs and meta-parameters based on the matrix data types and dimensions. \n        It enforces input compatibility, establishes execution grid dimensions, and sets device memory for output. \n        Configuration parameters such as BLOCK_SIZE_M, num_stages, and num_warps are determined per data type, \n        ensuring optimal kernel execution tailored for either float16 or Triton's experimental float8 types.\n    ", "label": null, "file": "triton_matmul.py", "test_code": "\n\n\nimport torch\n\n# Test for matmul\ndef test_matmul():\n    results = {}\n    M, K, N = 256, 128, 256\n\n    # Test case 1: torch.float16\n    a = torch.randn((M, K), dtype=torch.float16, device='cuda')\n    b = torch.randn((K, N), dtype=torch.float16, device='cuda')\n    c = matmul(a, b)\n    results['test_case_1'] = c\n\n    return results\n\n# Run all tests\nresult_gold = test_matmul()", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n\n@triton.autotune(\n    configs=[\n        triton.Config(\n            {\n                \"BLOCK_SIZE_M\": 128,\n                \"BLOCK_SIZE_N\": 256,\n                \"BLOCK_SIZE_K\": 64,\n                \"GROUP_SIZE_M\": 8,\n            },\n            num_stages=3,\n            num_warps=8,\n        ),\n        triton.Config(\n            {\n                \"BLOCK_SIZE_M\": 64,\n                \"BLOCK_SIZE_N\": 256,\n                \"BLOCK_SIZE_K\": 32,\n                \"GROUP_SIZE_M\": 8,\n            },\n            num_stages=4,\n            num_warps=4,\n        ),\n        triton.Config(\n            {\n                \"BLOCK_SIZE_M\": 128,\n                \"BLOCK_SIZE_N\": 128,\n                \"BLOCK_SIZE_K\": 32,\n                \"GROUP_SIZE_M\": 8,\n            },\n            num_stages=4,\n            num_warps=4,\n        ),\n        triton.Config(\n            {\n                \"BLOCK_SIZE_M\": 128,\n                \"BLOCK_SIZE_N\": 64,\n                \"BLOCK_SIZE_K\": 32,\n                \"GROUP_SIZE_M\": 8,\n            },\n            num_stages=4,\n            num_warps=4,\n        ),\n        triton.Config(\n            {\n                \"BLOCK_SIZE_M\": 64,\n                \"BLOCK_SIZE_N\": 128,\n                \"BLOCK_SIZE_K\": 32,\n                \"GROUP_SIZE_M\": 8,\n            },\n            num_stages=4,\n            num_warps=4,\n        ),\n        triton.Config(\n            {\n                \"BLOCK_SIZE_M\": 128,\n                \"BLOCK_SIZE_N\": 32,\n                \"BLOCK_SIZE_K\": 32,\n                \"GROUP_SIZE_M\": 8,\n            },\n            num_stages=4,\n            num_warps=4,\n        ),\n        triton.Config(\n            {\n                \"BLOCK_SIZE_M\": 64,\n                \"BLOCK_SIZE_N\": 32,\n                \"BLOCK_SIZE_K\": 32,\n                \"GROUP_SIZE_M\": 8,\n            },\n            num_stages=5,\n            num_warps=2,\n        ),\n        triton.Config(\n            {\n                \"BLOCK_SIZE_M\": 32,\n                \"BLOCK_SIZE_N\": 64,\n                \"BLOCK_SIZE_K\": 32,\n                \"GROUP_SIZE_M\": 8,\n            },\n            num_stages=5,\n            num_warps=2,\n        ),\n    ],\n    key=[\"M\", \"N\", \"K\"],\n)\n@triton.jit\ndef matmul_kernel(\n    a_ptr,\n    b_ptr,\n    c_ptr,\n    M,\n    N,\n    K,\n    stride_am,\n    stride_ak,\n    stride_bk,\n    stride_bn,\n    stride_cm,\n    stride_cn,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n    group_id = pid // num_pid_in_group\n    first_pid_m = group_id * GROUP_SIZE_M\n    group_size_m = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n    pid_m = first_pid_m + (pid % group_size_m)\n    pid_n = (pid % num_pid_in_group) // group_size_m\n\n    offs_am = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_bn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    offs_k = tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs = a_ptr + (offs_am[:, None] * stride_am + offs_k[None, :] * stride_ak)\n    b_ptrs = b_ptr + (offs_k[:, None] * stride_bk + offs_bn[None, :] * stride_bn)\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n    for k in range(0, tl.cdiv(K, BLOCK_SIZE_K)):\n        a_mask = (offs_am[:, None] < M) & (offs_k[None, :] < K - k * BLOCK_SIZE_K)\n        b_mask = (offs_k[:, None] < K - k * BLOCK_SIZE_K) & (offs_bn[None, :] < N)\n        a = tl.load(a_ptrs, mask=a_mask, other=0.0)\n        b = tl.load(b_ptrs, mask=b_mask, other=0.0)\n        accumulator += tl.dot(a, b)\n        a_ptrs += BLOCK_SIZE_K * stride_ak\n        b_ptrs += BLOCK_SIZE_K * stride_bk\n\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    c_ptrs = c_ptr + stride_cm * offs_cm[:, None] + stride_cn * offs_cn[None, :]\n    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    c = accumulator.to(c_ptr.dtype.element_ty)\n    tl.store(c_ptrs, c, mask=c_mask)\n\n\ndef matmul(a: torch.Tensor, b: torch.Tensor) -> torch.Tensor:\n    assert a.dim() == 2, \"Input a must be 2-D\"\n    assert b.dim() == 2, \"Input b must be 2-D\"\n    assert a.shape[1] == b.shape[0], \"Incompatible dimensions\"\n    M, K = a.shape\n    K2, N = b.shape\n    assert K == K2, \"Inner dimensions must match\"\n\n    c = torch.empty((M, N), device=a.device, dtype=a.dtype)\n\n    grid = lambda META: (\n        triton.cdiv(M, META[\"BLOCK_SIZE_M\"])\n        * triton.cdiv(N, META[\"BLOCK_SIZE_N\"]),\n    )\n\n    matmul_kernel[grid](\n        a,\n        b,\n        c,\n        M,\n        N,\n        K,\n        a.stride(0),\n        a.stride(1),\n        b.stride(0),\n        b.stride(1),\n        c.stride(0),\n        c.stride(1),\n    )\n    return c\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            The Triton-accelerated function embedding_kernel is specialized for extracting and storing embedding vectors from a weight matrix for a sequence of token IDs. It uses program IDs to determine processing offsets and handles iteration over sequences with BLOCK_N and BLOCK_NN stride sizes. For each sequence, it computes token IDs and uses masks to ensure only valid data is loaded and processed. The weight matrix is addressed using a combination of token IDs and dimension offsets, facilitated by the stride of the weight tensor. The processed vectors are then stored into the 'out' tensor using calculated strides and masks, ensuring each output sequence position receives the correct embedding vector. The wrapping function, embedding, configures and invokes the kernel with appropriate grid settings, aligning BLOCK_DMODEL to the next power of two based on weight dimensions and leveraging constant memory settings to optimize the embedding extraction process.\n            ", "label": null, "file": "embedding_triton_kernel.py", "test_code": "\n\n\nimport torch\n\ndef test_embedding():\n    # \u53c2\u6570\u5b9a\u4e49\n    vocab_size = 1000         # \u8bcd\u6c47\u8868\u5927\u5c0f\n    embedding_dim = 512       # \u5d4c\u5165\u7ef4\u5ea6\n    sequence_length = 128     # \u8f93\u5165\u5e8f\u5217\u957f\u5ea6\n    vob_start_id = 10         # \u8bcd\u6c47\u8868\u8d77\u59cb ID\n    vob_end_id = 1000         # \u8bcd\u6c47\u8868\u7ed3\u675f ID\n\n    # \u521b\u5efa\u6d4b\u8bd5\u8f93\u5165\u5f20\u91cf\n    input_ids = torch.randint(\n        vob_start_id, vob_end_id, (sequence_length,), dtype=torch.int32, device='cuda'\n    )\n    weight = torch.randn(\n        vocab_size, embedding_dim, dtype=torch.float32, device='cuda'\n    )\n    out = torch.zeros(\n        sequence_length, embedding_dim, dtype=torch.float32, device='cuda'\n    )\n\n    # \u8c03\u7528\u5d4c\u5165\u51fd\u6570\n    embedding(input_ids, weight, vob_start_id, vob_end_id, out)\n\n    # \u4fdd\u5b58\u7ed3\u679c\n    results = {}\n    results['test_case_1'] = out.clone()\n\n    # \u6d4b\u8bd5\u4e0d\u540c\u7684\u8f93\u5165\n    input_ids = torch.randint(\n        vob_start_id, vob_end_id, (sequence_length,), dtype=torch.int32, device='cuda'\n    )\n    embedding(input_ids, weight, vob_start_id, vob_end_id, out)\n    results['test_case_2'] = out.clone()\n\n    # \u6d4b\u8bd5\u4e0d\u540c\u7684\u8bcd\u6c47\u8868\u8303\u56f4\n    vob_start_id = 0\n    vob_end_id = 500\n    input_ids = torch.randint(\n        vob_start_id, vob_end_id, (sequence_length,), dtype=torch.int32, device='cuda'\n    )\n    embedding(input_ids, weight, vob_start_id, vob_end_id, out)\n    results['test_case_3'] = out.clone()\n\n    # \u6d4b\u8bd5\u4e0d\u540c\u7684\u5d4c\u5165\u7ef4\u5ea6\n    embedding_dim = 256\n    weight = torch.randn(\n        vocab_size, embedding_dim, dtype=torch.float32, device='cuda'\n    )\n    out = torch.zeros(\n        sequence_length, embedding_dim, dtype=torch.float32, device='cuda'\n    )\n    embedding(input_ids, weight, vob_start_id, vob_end_id, out)\n    results['test_case_4'] = out.clone()\n\n    return results\n\nresult_gold = test_embedding()\n", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef embedding_kernel(\n    weight,\n    out,\n    indices,\n    vocab_size,\n    d_model,\n    vob_start_id,\n    stride_out_0,\n    stride_weight_0,\n    BLOCK_N: tl.constexpr,\n    BLOCK_NN: tl.constexpr,\n    BLOCK_DMODEL: tl.constexpr,\n):\n    pid = tl.program_id(0)\n\n    offs_d = tl.arange(0, BLOCK_DMODEL)\n\n    for k in range(0, BLOCK_NN, BLOCK_N):\n        seq_off = pid * BLOCK_NN + k + tl.arange(0, BLOCK_N)\n        mask_seq = seq_off < out.shape[0]\n\n        token_idx_raw = tl.load(indices + seq_off, mask=mask_seq, other=0).to(tl.int32)\n        token_idx = token_idx_raw - vob_start_id\n        token_idx = tl.where(token_idx >= 0, token_idx, 0)\n        token_idx = tl.where(token_idx < vocab_size, token_idx, vocab_size - 1)\n\n        w_offs = (\n            token_idx[:, None] * d_model\n            + offs_d[None, :]\n        )\n        vec = tl.load(weight + w_offs)\n\n        o_offs = (\n            seq_off[:, None] * stride_out_0\n            + offs_d[None, :]\n        )\n        tl.store(out + o_offs, vec, mask=mask_seq[:, None])\n\n\ndef embedding(\n    weight: torch.Tensor,\n    indices: torch.Tensor,\n    vob_start_id: int,\n    vob_end_id: int,\n    out: torch.Tensor = None\n) -> torch.Tensor:\n    shape_2d = indices.shape\n    B, SEQ_LEN = shape_2d\n    d_model = weight.size(-1)\n    weight = weight.view(-1, d_model)  # Ensure [vocab_size, d_model]\n\n    if out is None:\n        out = torch.empty(\n            (B * SEQ_LEN, d_model),\n            dtype=weight.dtype,\n            device=weight.device\n        )\n    else:\n        out = out.view(B * SEQ_LEN, d_model)\n\n    vocab_sz = vob_end_id - vob_start_id if vob_end_id > vob_start_id else weight.size(0)\n\n    BLOCK_N = 16\n    BLOCK_NN = 64\n    BLOCK_DMODEL = triton.next_power_of_2(d_model)\n\n    grid = lambda META: (triton.cdiv(out.shape[0], META[\"BLOCK_NN\"]), )\n\n    embedding_kernel[grid](\n        weight,\n        out,\n        indices.view(-1),\n        vocab_size=vocab_sz,\n        d_model=d_model,\n        vob_start_id=vob_start_id,\n        stride_out_0=out.stride(0),\n        stride_weight_0=weight.stride(0),\n        BLOCK_N=BLOCK_N,\n        BLOCK_NN=BLOCK_NN,\n        BLOCK_DMODEL=BLOCK_DMODEL,\n    )\n\n    return out.view(B, SEQ_LEN, d_model)\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n        The code defines a Triton-based kernel for matrix multiplication of INT4 quantized weights and provides Python functions to handle the quantization and dequantization processes. \n        The 'matmul_kernel' function is a Triton kernel using @triton.jit which performs matrix multiplication. It processes the input matrices in tiles defined by BLOCK_SIZE_M, BLOCK_SIZE_N, and BLOCK_SIZE_K, and uses a loop to iterate over the K dimension to accumulate results in fp32 precision, subsequently stored in the output buffer, potentially employing atomic add for SPLIT_K > 1.\n        The kernel is set up with a wide variety of configurations, allowing Triton's autotuning capabilities to select optimal parameters based on matrix dimensions M, N, and K. It utilizes quantized INT4 weights, reconstructing them using scales and zero points to compute matrix products accurately. \n        The Python function 'matmul_dequantize_int4_s2' serves as an interface to this kernel, preparing data and launching the computation on specified grid dimensions.\n        The function 'quantize_int4' converts a floating-point weight matrix into INT4 format, organizing the data by packing 8 INT4 values into one INT32 and calculating scaling factors and zero points for each group of elements. \n        The helper function 'unpack_int4' is intended for testing; it unpacks the INT4 matrix back into a floating-point format to verify the quantization process.\n    ", "label": null, "file": "int4_matmul.py", "test_code": "\n\n\ndef test_correct_int4_s2(M=32, K=4096, N=4096):\n    group_size = 128\n    a = torch.randn((M, K), device='cuda', dtype=torch.float16)\n    b = torch.randn((K, N), device='cuda', dtype=torch.float16)\n    int_b, b_scale, b_zero_point, _ = quantize_int4(b, group_size=group_size)\n    \n    # Test case\n    triton_output = matmul_dequantize_int4_s2(a, int_b, b_scale, b_zero_point, group_size)\n    \n    results = {\n        \"test_case_1\": triton_output\n    }\n    \n    return results\n\nresult_gold = test_correct_int4_s2()\n", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n# ===========================================================\n# Triton  Kernel  (Direct  INT4  matmul)\n# -----------------------------------------------------------\n@triton.autotune(\n    configs=[\n        triton.Config({'BLOCK_SIZE_M': 64,  'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8, 'SPLIT_K': 1}, num_stages=4, num_warps=4),\n        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 64,  'BLOCK_SIZE_K': 32, 'GROUP_SIZE_M': 8, 'SPLIT_K': 1}, num_stages=4, num_warps=4),\n        triton.Config({'BLOCK_SIZE_M': 64,  'BLOCK_SIZE_N': 64,  'BLOCK_SIZE_K': 64, 'GROUP_SIZE_M': 8, 'SPLIT_K': 1}, num_stages=3, num_warps=8),\n        triton.Config({'BLOCK_SIZE_M': 32,  'BLOCK_SIZE_N': 32,  'BLOCK_SIZE_K': 128,'GROUP_SIZE_M': 8, 'SPLIT_K': 1}, num_stages=2, num_warps=4),\n    ],\n    key=['M', 'N', 'K'],\n)\n@triton.jit\ndef matmul_kernel(\n    a_ptr, b_ptr, c_ptr,\n    scales_ptr, zeros_ptr,\n    M, N, K,\n    stride_am, stride_ak,\n    stride_bk, stride_bn,     # stride_bk in ints (K//8, N)\n    stride_cm, stride_cn,\n    stride_scale_g, stride_scale_n,\n    stride_zp_g,   stride_zp_n,\n    group_size,\n    BLOCK_SIZE_M: tl.constexpr,\n    BLOCK_SIZE_N: tl.constexpr,\n    BLOCK_SIZE_K: tl.constexpr,\n    GROUP_SIZE_M: tl.constexpr,\n    SPLIT_K:      tl.constexpr,\n):\n    pid = tl.program_id(0)\n    pid_k = tl.program_id(1)\n\n    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)\n    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)\n    num_pid_k = tl.cdiv(K, BLOCK_SIZE_K * SPLIT_K)\n\n    num_pid_in_group = GROUP_SIZE_M * num_pid_n\n    group_id      = pid // num_pid_in_group\n    first_pid_m   = group_id * GROUP_SIZE_M\n    group_size_m  = min(num_pid_m - first_pid_m, GROUP_SIZE_M)\n    pid_m          = first_pid_m + (pid % group_size_m)\n    pid_n          = (pid % num_pid_in_group) // group_size_m\n\n    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n\n    start_k = pid_k * BLOCK_SIZE_K\n    offs_k  = start_k + tl.arange(0, BLOCK_SIZE_K)\n\n    a_ptrs  = a_ptr  + offs_m[:, None] * stride_am + offs_k[None, :] * stride_ak\n    b_ptrs  = b_ptr  + (offs_k[:, None] // 8) * stride_bk + offs_n[None, :] * stride_bn\n\n    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)\n\n    for k_step in range(0, tl.cdiv(K, BLOCK_SIZE_K * SPLIT_K)):\n        k_curr = k_step * BLOCK_SIZE_K * SPLIT_K + pid_k * BLOCK_SIZE_K + tl.arange(0, BLOCK_SIZE_K)\n        mask_k = k_curr[None, :] < K\n\n        a = tl.load(a_ptrs, mask=mask_k, other=0.0)\n\n        b_raw      = tl.load(b_ptrs, mask=mask_k, other=0)\n        group_idx  = k_curr[:, None] // group_size\n        shift      = (k_curr[:, None] % 8) * 4\n        bits       = (b_raw >> shift) & 0xF\n\n        scales = tl.load(\n            scales_ptr + group_idx * stride_scale_g + offs_n[None, :] * stride_scale_n,\n            mask=mask_k, other=0.0\n        )\n        zeros  = tl.load(\n            zeros_ptr  + group_idx * stride_zp_g   + (offs_n[None, :] // 8) * stride_zp_n,\n            mask=mask_k, other=0.0\n        )\n        zeros_bits = (zeros >> ((offs_n[None, :] % 8) * 4)) & 0xF\n\n        b_deq = (bits - zeros_bits) * scales\n        accumulator += tl.dot(a, b_deq)\n\n        a_ptrs += BLOCK_SIZE_K * SPLIT_K * stride_ak\n        b_ptrs += (BLOCK_SIZE_K * SPLIT_K // 8) * stride_bk\n\n    offs_cm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)\n    offs_cn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)\n    mask_c  = (offs_cm[:, None] < M) & (offs_cn[None, :] < N)\n    c_ptrs  = c_ptr + offs_cm[:, None] * stride_cm + offs_cn[None, :] * stride_cn\n\n    out_vals = accumulator.to(c_ptr.dtype.element_ty)\n    if SPLIT_K > 1:\n        tl.atomic_add(c_ptrs, out_vals, mask=mask_c)\n    else:\n        tl.store(c_ptrs,      out_vals, mask=mask_c)\n\n# ===========================================================\n# Python wrapper\n# -----------------------------------------------------------\ndef matmul_dequantize_int4_s2(\n    x: torch.FloatTensor,\n    qweight: torch.FloatTensor,\n    scales:  torch.FloatTensor,\n    zeros:   torch.FloatTensor,\n    split_k: int = 1,\n) -> torch.FloatTensor:\n    assert x.dim() == 2 and qweight.dim() == 2 and scales.dim() == 2 and zeros.dim() == 2\n    M, K = x.shape\n    assert K == qweight.shape[0] * 8\n    N = qweight.shape[1]\n    assert scales.shape == (K // scales.shape[0], N)\n    assert zeros.shape  == (K // zeros.shape[0],  N)\n\n    output = torch.empty((M, N), dtype=x.dtype, device=x.device)\n\n    grid = lambda META: (\n        triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),\n        split_k,\n    )\n    matmul_kernel[grid](\n        x, qweight, output,\n        scales, zeros,\n        M, N, K,\n        x.stride(0),                    x.stride(1),\n        qweight.stride(0),              qweight.stride(1),\n        output.stride(0),               output.stride(1),\n        scales.stride(0),               scales.stride(1),\n        zeros.stride(0),                zeros.stride(1),\n        scales.shape[0],\n    )\n    return output\n\n# ===========================================================\n# Quantise / Unpack helpers (correct 8\u00d7 packing)\n# -----------------------------------------------------------\ndef quantize_int4(w: torch.Tensor, group_size: int = 128) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor, int]:\n    \"\"\"\n    w: [OC, K] (fp16/fp32 weights)\n    returns: (qpacked, scales, zerospacked, group_size)\n       qpacked : int32, shape [OC, K//8]\n       scales  : fp16/fp32 [OC, K//group_size]\n       zerospacked : int32 [K//group_size, OC//8]\n    \"\"\"\n    assert w.dim() == 2\n    OC, K = w.shape\n    assert K % group_size == 0\n\n    w = w.view(-1, K)\n    OC_total, K_ = w.shape\n    groups_per_row = K_ // group_size\n    w = w.view(OC_total, groups_per_row, group_size)\n\n    w_min = w.min(dim=2, keepdim=True).values\n    w_max = w.max(dim=2, keepdim=True).values\n    scales = (w_max - w_min) / 15.0\n    zeros  = torch.round(-w_min / scales).clamp(0, 15).to(torch.int32)\n\n    quant = torch.clamp(torch.round((w / scales) + zeros), 0, 15).to(torch.int32)\n\n    # === pack 8\u00d7OC along the OC axis (group row dimension of zero) ===\n    OC_pack = OC_total // 8\n    zeros_pack = zeros.permute(1, 0, 2).contiguous().view(groups_per_row, OC_pack, 8)\n    zeros_packed = zeros_pack[..., 0]\n    for p in range(1, 8):\n        zeros_packed |= zeros_pack[..., p] << (p * 4)\n    zeros_packed = zeros_packed.view(groups_per_row, OC_pack).contiguous()\n\n    # === pack 8\u00d7K along the K axis (group column dimension of weight) ===\n    K_pack = K_ // 8\n    quant = quant.view(OC_total, K_)\n    qpacked = torch.empty((OC_total, K_pack), dtype=torch.int32, device=w.device)\n\n    for p in range(8):\n        qpacked |= quant[:, p::8] << (p * 4)\n\n    qpacked = qpacked.contiguous()\n    scales  = scales.view(OC_total, groups_per_row).contiguous()\n    return qpacked, scales, zeros_packed, group_size\n\n\n# -----------------------------------------------------------\ndef unpack_int4(\n    qweight: torch.Tensor,\n    scales:  torch.Tensor,\n    zeros:   torch.Tensor,\n    group_size: int = 128\n) -> torch.Tensor:\n    \"\"\"\n    qweight : int32 [OC, K//8]\n    scales  : [OC, K//group_size]\n    zeros   : int32 [K//group_size, OC//8]\n    returns : fp16/fp32 tensor [OC, K]\n    \"\"\"\n    OC, K8 = qweight.shape\n    K = K8 * 8\n    group_dim = K // group_size\n    assert scales.shape == (OC, group_dim)\n    assert zeros.shape  == (group_dim, OC//8)\n\n    # --- weight ---\n    quant = torch.empty((OC, K), dtype=torch.int32, device=qweight.device)\n    for p in range(8):\n        mask = 0xF << (p * 4)\n        quant[:, p::8] = (qweight & mask) >> (p * 4)\n\n    # --- zero (grouped) ---\n    OC8 = OC // 8\n    zeros_ext = torch.empty((group_dim, OC), dtype=torch.int32, device=zeros.device)\n    for p in range(8):\n        mask = 0xF << (p * 4)\n        zeros_ext[:, p::8] = (zeros & mask) >> (p * 4)\n    zeros_ext = zeros_ext.permute(1, 0).contiguous()\n\n    # --- dequant ---\n    scales_mat = scales.view(OC, group_dim).unsqueeze(-1).expand(-1, -1, group_size).reshape(OC, K)\n    zeros_mat  = zeros_ext.view(OC, group_dim).unsqueeze(-1).expand(-1, -1, group_size).reshape(OC, K)\n\n    return (quant.float() - zeros_mat) * scales_mat\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            The `_fwd_kernel_flash_decode_stage2` Triton kernel is a parallel computation designed for processing sequences in a neural network context, specifically dealing with batches, heads, and sequence blocks. This kernel receives several inputs: `B_Seqlen`, `Mid_O`, `Mid_O_LogExpSum`, and `Out`, along with strides for indexing. `B_Seqlen` contains sequence lengths per batch, `Mid_O` contains intermediate outputs, `Mid_O_LogExpSum` holds log-exp sum values, and `Out` will store the final output. The kernel operates over a 2D grid defined by batch size and head count (`grid = (batch, head_num)`), with constants `BLOCK_SEQ` and `BLOCK_DMODEL` indicating sequence block size and dimension alignment respectively.\n\n            The kernel function operates as follows:\n            - Identifies the current batch and head using `tl.program_id`.\n            - Initializes accumulators: `sum_exp`, `max_logic`, and `acc` to accumulate exponential logic and values.\n            - Loads the current sequence length and calculates the number of sequence blocks (`block_n_size`).\n            - Iterates over each block, where:\n                - It loads values (`tv`) from `Mid_O` and logic sums (`tlogic`) from `Mid_O_LogExpSum`.\n                - Computes the maximum logic value across blocks and scales previous accumulations.\n                - Updates the accumulators by computing the exponential of adjusted logic values and scaling/accumulating.\n            - Stores the final normalized result into `Out`, scaling accumulated values by the sum of exponentials.\n\n            The `flash_decode_stage2` function sets up and invokes this kernel, determining dimensions and grid setup based on input tensor shapes. It ensures efficient computation by using Triton's parallel execution framework, specifying warp and stage numbers.\n            ", "label": null, "file": "flash_decode2_phi.py", "test_code": "\n\n\nimport torch\n\n# Define the test function\ndef test_flash_decode_stage2():\n    # Define the parameters for different test cases\n    batch_size = 2\n    head_num = 4\n    seq_block_num = 3\n    head_dim = 64\n    block_seq = 16\n\n    test_cases = {\n        \"test_case_1\": {\n            \"B_Seqlen\": torch.randint(1, seq_block_num * block_seq, (batch_size,), dtype=torch.int32, device='cuda'),\n            \"mid_out\": torch.randn((batch_size, head_num, seq_block_num, head_dim), dtype=torch.float32, device='cuda'),\n            \"mid_out_logexpsum\": torch.randn((batch_size, head_num, seq_block_num), dtype=torch.float32, device='cuda'),\n            \"Out\": torch.zeros((batch_size, head_num, head_dim), dtype=torch.float32, device='cuda'),\n            \"block_seq\": block_seq\n        },\n        \"test_case_2\": {\n            \"B_Seqlen\": torch.randint(1, seq_block_num * block_seq, (batch_size,), dtype=torch.int32, device='cuda'),\n            \"mid_out\": torch.randn((batch_size, head_num, seq_block_num, head_dim), dtype=torch.float32, device='cuda'),\n            \"mid_out_logexpsum\": torch.randn((batch_size, head_num, seq_block_num), dtype=torch.float32, device='cuda'),\n            \"Out\": torch.zeros((batch_size, head_num, head_dim), dtype=torch.float32, device='cuda'),\n            \"block_seq\": block_seq + 1  # Different block size\n        },\n        \"test_case_3\": {\n            \"B_Seqlen\": torch.randint(1, seq_block_num * block_seq, (batch_size,), dtype=torch.int32, device='cuda'),\n            \"mid_out\": torch.randn((batch_size, head_num, seq_block_num, head_dim), dtype=torch.float32, device='cuda'),\n            \"mid_out_logexpsum\": torch.randn((batch_size, head_num, seq_block_num), dtype=torch.float32, device='cuda'),\n            \"Out\": torch.zeros((batch_size, head_num, head_dim), dtype=torch.float32, device='cuda'),\n            \"block_seq\": block_seq // 2  # Different block size\n        },\n        \"test_case_4\": {\n            \"B_Seqlen\": torch.randint(1, seq_block_num * block_seq, (batch_size,), dtype=torch.int32, device='cuda'),\n            \"mid_out\": torch.randn((batch_size, head_num, seq_block_num, head_dim), dtype=torch.float32, device='cuda'),\n            \"mid_out_logexpsum\": torch.randn((batch_size, head_num, seq_block_num), dtype=torch.float32, device='cuda'),\n            \"Out\": torch.zeros((batch_size, head_num, head_dim), dtype=torch.float32, device='cuda'),\n            \"block_seq\": block_seq * 2  # Different block size\n        }\n    }\n\n    # Execute the function for all test cases\n    results = {}\n    for key, test_case in test_cases.items():\n        flash_decode_stage2(test_case[\"mid_out\"], test_case[\"mid_out_logexpsum\"], test_case[\"B_Seqlen\"], test_case[\"Out\"], test_case[\"block_seq\"])\n        results[key] = test_case[\"Out\"]\n\n    return results\n\n# Run the test\nresult_gold = test_flash_decode_stage2()\n", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _fwd_kernel_flash_decode_stage2(\n    B_Seqlen,\n    Mid_O,          # [batch, head, seq_block_num, head_dim]\n    Mid_O_LogExpSum,# [batch, head, seq_block_num]\n    Out,            # [batch, head, head_dim]\n    stride_mid_ob,\n    stride_mid_oh,\n    stride_mid_os,\n    stride_mid_od,\n    stride_mid_o_eb,\n    stride_mid_o_eh,\n    stride_mid_o_es,\n    stride_out_b,\n    stride_out_h,\n    stride_out_d,\n    BLOCK_SEQ: tl.constexpr,\n    BLOCK_DMODEL: tl.constexpr,\n):\n    cur_batch = tl.program_id(0)\n    cur_head  = tl.program_id(1)\n\n    offs_d = tl.arange(0, BLOCK_DMODEL)\n    cur_seq_len = tl.load(B_Seqlen + cur_batch)\n    block_n_size = (cur_seq_len + BLOCK_SEQ - 1) // BLOCK_SEQ\n\n    sum_exp   = 0.0\n    max_logic = -float(\"inf\")\n    acc       = tl.zeros([BLOCK_DMODEL], dtype=tl.float32)\n\n    for block_seq_id in range(0, block_n_size):\n        ptr_v    = (Mid_O\n                    + cur_batch * stride_mid_ob\n                    + cur_head * stride_mid_oh\n                    + block_seq_id * stride_mid_os\n                    + offs_d * stride_mid_od)\n        tv       = tl.load(ptr_v).to(tl.float32)\n\n        ptr_logic = (Mid_O_LogExpSum\n                     + cur_batch * stride_mid_o_eb\n                     + cur_head * stride_mid_o_eh\n                     + block_seq_id * stride_mid_o_es)\n        tlogic   = tl.load(ptr_logic).to(tl.float32)\n\n        new_max  = tl.maximum(max_logic, tlogic)\n        scale    = tl.exp(max_logic - new_max)\n        acc      = acc * scale\n        sum_exp  = sum_exp * scale\n\n        delta    = tl.exp(tlogic - new_max)\n        acc     += delta * tv\n        sum_exp += delta\n        max_logic = new_max\n\n    acc = acc / sum_exp\n\n    ptr_out = (Out\n               + cur_batch * stride_out_b\n               + cur_head * stride_out_h\n               + offs_d * stride_out_d)\n    tl.store(ptr_out, acc.to(Out.dtype.element_ty))\n\n\n@torch.no_grad()\ndef flash_decode_stage2(\n    B_Seqlen: torch.Tensor,\n    Mid_O: torch.Tensor,\n    Mid_O_LogExpSum: torch.Tensor,\n    Out: torch.Tensor,\n    BLOCK_SEQ: int = 64,\n):\n    assert Mid_O.dim()         == 4\n    assert Mid_O_LogExpSum.dim() == 3   # [batch, head, seq_block_num]\n    assert B_Seqlen.dim()      == 1\n    assert Out.dim()           == 3     # [batch, head, head_dim]\n    assert Mid_O.shape[0] == Out.shape[0]\n    assert Mid_O.shape[1] == Out.shape[1]\n    assert Mid_O.shape[3] == Out.shape[2]\n    assert Mid_O.shape[0] == Mid_O_LogExpSum.shape[0]\n    assert Mid_O.shape[1] == Mid_O_LogExpSum.shape[1]\n    assert Mid_O.shape[2] == Mid_O_LogExpSum.shape[2]\n\n    BLOCK_DMODEL = Out.shape[-1]\n    batch, head_num = Out.shape[0], Out.shape[1]\n    grid = (batch, head_num)\n\n    _fwd_kernel_flash_decode_stage2[grid](\n        B_Seqlen,\n        Mid_O,\n        Mid_O_LogExpSum,\n        Out,\n        Mid_O.stride(0),\n        Mid_O.stride(1),\n        Mid_O.stride(2),\n        Mid_O.stride(3),\n        Mid_O_LogExpSum.stride(0),\n        Mid_O_LogExpSum.stride(1),\n        Mid_O_LogExpSum.stride(2),\n        Out.stride(0),\n        Out.stride(1),\n        Out.stride(2),\n        BLOCK_SEQ=BLOCK_SEQ,\n        BLOCK_DMODEL=BLOCK_DMODEL,\n        num_warps=4,\n        num_stages=2,\n    )\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\nThe Triton operator is defined to transpose a matrix using a kernel function and a wrapper function. The kernel function named 'kernel' is decorated with '@triton.jit' for just-in-time compilation and performs matrix transposition by directly manipulating pointers based on the given strides and dimensions. It accepts input parameters such as a matrix 'M', an output buffer 'Out', the strides of 'M' and 'Out', and the dimensions 'SIZE_M' and 'D_HEAD'. The kernel computes the pointers for elements of 'M' using 'matrix_stridex' and 'matrix_stridey', and for 'Out' using 'out_stridex' and 'out_stridey'. The transposition is achieved by loading elements from 'M' and storing them into 'Out' in a transposed layout. The wrapper function named 'wrapper' initializes 'matrix' with random float16 values and 'out' with zeros, both on CUDA. It defines the grid configuration as a tuple with a single element, then calls the kernel with these matrices and their properties. Finally, it returns the transposed matrix 'out'.\n    ", "label": null, "file": "matrix_transpose.py", "test_code": "\n\n\nimport torch\n\ndef test_triton_vs_torch():\n    results = {}\n\n    # \u6d4b\u8bd5\u7528\u4f8b 1: \u57fa\u672c\u77e9\u9635\u8f6c\u7f6e (\u5c0f\u77e9\u9635)\n    size_m, d_head = 16, 16\n    out = wrapper(size_m, d_head)\n    results[\"test_case_1\"] = out.clone()\n\n    # \u6d4b\u8bd5\u7528\u4f8b 2: \u975e\u65b9\u5f62\u77e9\u9635\n    size_m, d_head = 32, 64\n    out = wrapper(size_m, d_head)\n    results[\"test_case_2\"] = out.clone()\n\n    return results\n\n\n# \u8fd0\u884c\u6d4b\u8bd5\nresult_gold = test_triton_vs_torch()\n# print(result_gold)", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef kernel(\n    M,\n    Out,\n    matrix_stridex,\n    matrix_stridey,\n    out_stridex,\n    out_stridey,\n    SIZE_M: tl.constexpr,\n    D_HEAD: tl.constexpr,\n):\n    size_m_arange = tl.arange(0, SIZE_M)\n    d_head_arange = tl.arange(0, D_HEAD)\n\n    rows = size_m_arange[:, None]\n    cols = d_head_arange[None, :]\n    matrix_ptr = M + rows * matrix_stridex + cols * matrix_stridey\n    matrix_value = tl.load(matrix_ptr)\n\n    out_rows = d_head_arange[:, None]\n    out_cols = size_m_arange[None, :]\n    out_ptr = Out + out_rows * out_stridex + out_cols * out_stridey\n\n    tl.store(out_ptr, tl.trans(matrix_value))\n\ndef wrapper(SIZE_M: int, D_HEAD: int):\n    device = \"cuda\"\n    matrix = torch.randn((SIZE_M, D_HEAD), dtype=torch.float16, device=device)\n    out = torch.zeros((D_HEAD, SIZE_M), dtype=torch.float16, device=device)\n    grid = (1,)\n    kernel[grid](\n        matrix,\n        out,\n        matrix.stride(1),\n        matrix.stride(0),\n        out.stride(1),\n        out.stride(0),\n        SIZE_M=SIZE_M,\n        D_HEAD=D_HEAD,\n    )\n    return out\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n        The `rotary_kernel` function is a Triton kernel that performs rotary position encoding on a tensor `X` using precomputed cosine (`COS`) and sine (`SIN`) matrices. It modifies or populates the output tensor `OUT` with the transformed data. The kernel accommodates both fixed and variable sequence lengths, controlled by the presence of `CU_SEQLENS`. The kernel handles interleaved and non-interleaved formats and allows for in-place transformations and conjugate computations if specified.\n\n        The kernel operates in a three-dimensional grid, processing batches (`pid_batch`), heads (`pid_head`), and sequences (`pid_m`). It calculates transformations by loading blocks of data and applying rotary transformations based on cosine and sine values. The key operations are tailored based on whether the data is interleaved or not, with conditional handling for conjugation using `CONJUGATE`.\n\n        The `apply_rotary` function acts as a high-level interface to the Triton kernel. It accepts the input tensor `x`, cosine and sine matrices, sequence length offsets, and optional cumulative sequence lengths (`cu_seqlens`). The function determines the execution grid and block sizes, aligning them with the input data shape and configuration. It initializes an output tensor, copying non-rotary parts of `x` if required. The function ensures that the kernel is called with appropriate arguments, matching the shape and type expectations set within the kernel logic. This design allows for efficient rotary transformations in transformer architectures.\n    ", "label": null, "file": "rotary_transform.py", "test_code": "\n\n\nimport torch\n\ndef test_apply_rotary():\n    results = {}\n    \n    # Test case 1: Basic test with fixed sequence length and no interleaving\n    batch, seqlen, nheads, headdim = 2, 128, 4, 64\n    rotary_dim = 32\n    x = torch.randn(batch, seqlen, nheads, headdim, device='cuda')\n    cos = torch.randn(seqlen, rotary_dim // 2, device='cuda')\n    sin = torch.randn(seqlen, rotary_dim // 2, device='cuda')\n    output = apply_rotary(x, cos, sin)\n    results['test_case_1'] = output.shape\n\n    # Test case 2: Variable length sequences with interleaving\n    total_seqlen, nheads, headdim = 256, 4, 64\n    batch = 3\n    cu_seqlens = torch.tensor([0, 100, 200, 256], device='cuda')\n    max_seqlen = 128\n    rotary_dim = 32\n    x = torch.randn(total_seqlen, nheads, headdim, device='cuda')\n    cos = torch.randn(max_seqlen, rotary_dim // 2, device='cuda')\n    sin = torch.randn(max_seqlen, rotary_dim // 2, device='cuda')\n    output = apply_rotary(x, cos, sin, cu_seqlens=cu_seqlens, max_seqlen=max_seqlen, interleaved=True)\n    results['test_case_2'] = output.shape\n\n    # Test case 3: Conjugate flag enabled\n    batch, seqlen, nheads, headdim = 2, 128, 4, 64\n    rotary_dim = 32\n    x = torch.randn(batch, seqlen, nheads, headdim, device='cuda')\n    cos = torch.randn(seqlen, rotary_dim // 2, device='cuda')\n    sin = torch.randn(seqlen, rotary_dim // 2, device='cuda')\n    output = apply_rotary(x, cos, sin, conjugate=True)\n    results['test_case_3'] = output.shape\n\n    # Test case 4: Inplace operation\n    batch, seqlen, nheads, headdim = 2, 128, 4, 64\n    rotary_dim = 32\n    x = torch.randn(batch, seqlen, nheads, headdim, device='cuda')\n    cos = torch.randn(seqlen, rotary_dim // 2, device='cuda')\n    sin = torch.randn(seqlen, rotary_dim // 2, device='cuda')\n    output = apply_rotary(x, cos, sin, inplace=True)\n    results['test_case_4'] = output.shape\n\n    return results\n\nresult_gold = test_apply_rotary()\n", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\nimport logging\nfrom typing import Optional, Union\n\n@triton.jit\ndef rotary_kernel(\n    OUT, X, COS, SIN, CU_SEQLENS, SEQLEN_OFFSETS,\n    seqlen, nheads, rotary_dim, seqlen_ro, CACHE_KEY_SEQLEN,\n    stride_out_batch, stride_out_seqlen, stride_out_nheads, stride_out_headdim,\n    stride_x_batch, stride_x_seqlen, stride_x_nheads, stride_x_headdim,\n    BLOCK_K: tl.constexpr, IS_SEQLEN_OFFSETS_TENSOR: tl.constexpr,\n    IS_VARLEN: tl.constexpr, INTERLEAVED: tl.constexpr, CONJUGATE: tl.constexpr,\n    BLOCK_M: tl.constexpr,\n):\n    pid_m = tl.program_id(0)\n    pid_batch = tl.program_id(1)\n    pid_head = tl.program_id(2)\n    rotary_dim_half = rotary_dim // 2\n\n    if not IS_VARLEN:\n        cur_seqlen = seqlen\n        x_ptr = X + pid_batch * stride_x_batch + pid_head * stride_x_nheads\n        out_ptr = OUT + pid_batch * stride_out_batch + pid_head * stride_out_nheads\n    else:\n        start_idx = tl.load(CU_SEQLENS + pid_batch)\n        end_idx = tl.load(CU_SEQLENS + pid_batch + 1)\n        cur_seqlen = end_idx - start_idx\n        x_ptr = X + start_idx * stride_x_seqlen + pid_head * stride_x_nheads\n        out_ptr = OUT + start_idx * stride_out_seqlen + pid_head * stride_out_nheads\n\n    rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)\n    mask_m = rm < cur_seqlen\n\n    if IS_SEQLEN_OFFSETS_TENSOR:\n        offset = tl.load(SEQLEN_OFFSETS + pid_batch)\n    else:\n        offset = SEQLEN_OFFSETS\n    rm_cs = rm + offset\n    mask_m_cs = rm_cs < seqlen_ro\n\n    if not INTERLEAVED:\n        rk_half = tl.arange(0, BLOCK_K)\n        mask_k_half = rk_half < rotary_dim_half\n\n        cos_offs = rm_cs[:, None] * rotary_dim_half + rk_half[None, :]\n        sin_offs = cos_offs\n        cos = tl.load(COS + cos_offs, mask=mask_m_cs[:, None] & mask_k_half[None, :], other=1.0).to(tl.float32)\n        sin = tl.load(SIN + sin_offs, mask=mask_m_cs[:, None] & mask_k_half[None, :], other=0.0).to(tl.float32)\n\n        x0_offs = x_ptr + rm[:, None] * stride_x_seqlen + rk_half[None, :] * stride_x_headdim\n        x1_offs = x0_offs + rotary_dim_half * stride_x_headdim\n\n        x0 = tl.load(x0_offs, mask=mask_m[:, None] & mask_k_half[None, :], other=0.0).to(tl.float32)\n        x1 = tl.load(x1_offs, mask=mask_m[:, None] & mask_k_half[None, :], other=0.0).to(tl.float32)\n\n        if CONJUGATE:\n            sin = -sin\n        y0 = x0 * cos - x1 * sin\n        y1 = x0 * sin + x1 * cos\n\n        out0_offs = out_ptr + rm[:, None] * stride_out_seqlen + rk_half[None, :] * stride_out_headdim\n        out1_offs = out0_offs + rotary_dim_half * stride_out_headdim\n\n        tl.store(out0_offs, y0, mask=mask_m[:, None] & mask_k_half[None, :])\n        tl.store(out1_offs, y1, mask=mask_m[:, None] & mask_k_half[None, :])\n    else:\n        rk = tl.arange(0, BLOCK_K)\n        mask_k = rk < rotary_dim\n\n        rk_repeat = rk // 2\n        cs_mask = rk_repeat[None, :] < rotary_dim_half\n\n        cos_offs = rm_cs[:, None] * rotary_dim_half + rk_repeat[None, :]\n        sin_offs = cos_offs\n        cos = tl.load(COS + cos_offs, mask=mask_m_cs[:, None] & cs_mask, other=1.0).to(tl.float32)\n        sin = tl.load(SIN + sin_offs, mask=mask_m_cs[:, None] & cs_mask, other=0.0).to(tl.float32)\n\n        rk_swap = rk + ((rk + 1) % 2) * 2 - 1\n        x0_offs = x_ptr + rm[:, None] * stride_x_seqlen + rk[None, :] * stride_x_headdim\n        x1_offs = x_ptr + rm[:, None] * stride_x_seqlen + rk_swap[None, :] * stride_x_headdim\n\n        x0 = tl.load(x0_offs, mask=mask_m[:, None] & mask_k[None, :], other=0.0).to(tl.float32)\n        x1 = tl.load(x1_offs, mask=mask_m[:, None] & mask_k[None, :], other=0.0).to(tl.float32)\n\n        if CONJUGATE:\n            sin = -sin\n        x0_cos = x0 * cos\n        x1_sin = x1 * sin\n        out = tl.where(rk[None, :] % 2 == 0, x0_cos - x1_sin, x0_cos + x1_sin)\n\n        out_offs = out_ptr + rm[:, None] * stride_out_seqlen + rk[None, :] * stride_out_headdim\n        tl.store(out_offs, out, mask=mask_m[:, None] & mask_k[None, :])\n\n\ndef apply_rotary(\n    x: torch.Tensor,\n    cos: torch.Tensor,\n    sin: torch.Tensor,\n    seqlen_offsets: Union[int, torch.Tensor] = 0,\n    cu_seqlens: Optional[torch.Tensor] = None,\n    max_seqlen: Optional[int] = None,\n    interleaved: bool = False,\n    inplace: bool = False,\n    conjugate: bool = False,\n) -> torch.Tensor:\n    is_varlen = cu_seqlens is not None\n    if not is_varlen:\n        batch, seqlen, nheads, headdim = x.shape\n    else:\n        assert max_seqlen is not None, \"If cu_seqlens is passed in, then max_seqlen must be passed\"\n        total_seqlen, nheads, headdim = x.shape\n        batch = cu_seqlens.shape[0] - 1\n        seqlen = max_seqlen\n    seqlen_ro, rotary_dim = cos.shape\n    assert sin.shape == cos.shape\n    assert rotary_dim <= headdim\n    rotary_dim = rotary_dim * 2\n    assert headdim <= 256, \"Only support headdim <= 256\"\n    assert seqlen_ro >= seqlen, \"seqlen_ro must be >= seqlen\"\n    assert cos.dtype == sin.dtype\n    assert x.dtype == cos.dtype\n\n    cos = cos.contiguous()\n    sin = sin.contiguous()\n    if isinstance(seqlen_offsets, torch.Tensor):\n        assert seqlen_offsets.shape == (batch,)\n        assert seqlen_offsets.dtype in [torch.int32, torch.int64]\n        seqlen_offsets = seqlen_offsets.contiguous()\n    else:\n        assert seqlen_offsets + seqlen <= seqlen_ro\n\n    output = torch.empty_like(x) if not inplace else x\n    if rotary_dim < headdim and not inplace:\n        output[..., rotary_dim:].copy_(x[..., rotary_dim:])\n\n    if interleaved:\n        BLOCK_M = 4\n    else:\n        BLOCK_M = 8 if rotary_dim <= 64 else 4\n    BLOCK_K = 32 if rotary_dim <= 32 else 64 if rotary_dim <= 64 else 128 if rotary_dim <= 128 else 256\n\n    grid = lambda META: (\n        triton.cdiv(seqlen, META[\"BLOCK_M\"]),\n        batch,\n        nheads,\n    )\n\n    rotary_kernel[grid](\n        output,\n        x,\n        cos,\n        sin,\n        cu_seqlens,\n        seqlen_offsets,\n        seqlen,\n        nheads,\n        rotary_dim,\n        seqlen_ro,\n        seqlen // 128,\n        output.stride(0) if not is_varlen else 0,\n        output.stride(-3),\n        output.stride(-2),\n        output.stride(-1),\n        x.stride(0) if not is_varlen else 0,\n        x.stride(-3),\n        x.stride(-2),\n        x.stride(-1),\n        BLOCK_K,\n        isinstance(seqlen_offsets, torch.Tensor),\n        is_varlen,\n        interleaved,\n        conjugate,\n        BLOCK_M,\n    )\n    return output\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            The code implements a Triton kernel named `kernel_function`, which processes input data using block-wise operations. \n            The kernel takes pointers to input and output data (`x_ptr` and `output_ptr`), the total number of elements to process (`n_elements`), and a constant block size (`BLOCK_SIZE`). \n            Inside the kernel, each program instance calculates its starting point (`block_start`) and creates an `offsets` tensor for element indexing. \n            A mask ensures operations only occur on valid indices within the input bounds. The kernel loads data from `x_ptr`, computes the sine using `tl.math.sin`, and stores the result in `output_ptr`. \n            The `call_kernel` function prepares to execute the kernel by calculating the total number of elements (`n_elements`) and creates an output tensor. \n            It defines a grid configuration function using lambda to handle thread block calculations based on `BLOCK_SIZE`, ensuring the entire input is processed. \n            The kernel is then launched with the grid configuration, input, output, and element count.\n            ", "label": null, "file": "sin_kernel.py", "test_code": "\n\n\nimport torch\n\n# Function to test the Triton kernel\ndef test_call_kernel():\n    results = {}\n    \n    # Test case 1: Small input tensor\n    x1 = torch.tensor([0.0, 1.0, 2.0, 3.0], dtype=torch.float32).cuda()\n    output1 = call_kernel(x1)\n    results['test_case_1'] = output1\n    \n    # Test case 2: Larger input tensor\n    x2 = torch.linspace(0, 10, steps=1024, dtype=torch.float32).cuda()\n    output2 = call_kernel(x2)\n    results['test_case_2'] = output2\n\n    # Test case 3: Edge case with zero elements\n    x3 = torch.tensor([], dtype=torch.float32).cuda()\n    output3 = call_kernel(x3)\n    results['test_case_3'] = output3\n\n    # Test case 4: Input tensor with negative values\n    x4 = torch.tensor([-1.0, -2.0, -3.0, -4.0], dtype=torch.float32).cuda()\n    output4 = call_kernel(x4)\n    results['test_case_4'] = output4\n    \n    return results\n\n# Run the test function\nresult_gold = test_call_kernel()\n", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef kernel_function(x_ptr, output_ptr, n_elements, BLOCK_SIZE: tl.constexpr):\n    pid = tl.program_id(0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n    x = tl.load(x_ptr + offsets, mask=mask)\n    y = tl.math.sin(x)\n    tl.store(output_ptr + offsets, y, mask=mask)\n\ndef call_kernel(x: torch.Tensor) -> torch.Tensor:\n    n_elements = x.numel()\n    output = torch.empty_like(x)\n    BLOCK_SIZE = 1024\n    grid = lambda meta: (triton.cdiv(n_elements, meta[\"BLOCK_SIZE\"]),)\n    kernel_function[grid](\n        x,\n        output,\n        n_elements,\n        BLOCK_SIZE=BLOCK_SIZE\n    )\n    return output\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n    The Triton kernel `_l2_norm_bwd_kernel` performs a backward pass operation for L2 normalization on a per-row basis. It receives pointers to input `X`, output gradient `DY`, and calculates the input gradient `DX`. Each row of the input is accessed using the `stride_x_row`. `BLOCK_N` determines the number of elements processed per block, set based on maximum allowable fused size and next power of 2 of `N`. Within the kernel, it computes the variance of the input slice, uses it to compute the reciprocal of the standard deviation (`rstd`), and then calculates `dx` using the formula `dy * rstd - tl.sum(dy * x) * (1 / (var+eps)) * rstd * x`. The result is conditionally stored in `DX` using masks. The `_l2_norm_bwd` function orchestrates this process, ensuring input tensors `x` and `dy` are properly reshaped and their strides configured for contiguity if necessary. If `N` exceeds `BLOCK_N`, an error is raised to prevent excessive feature dimensions. Finally, the kernel is launched over `M` rows of the reshaped tensors, and the output `dx` is reshaped back to the original input shape.\n    ", "label": null, "file": "l2_norm_bwd.py", "test_code": "\n\n\nimport torch\n\n# Test the backward L2 normalization\ndef test_l2_norm_bwd():\n    results = {}\n    \n    # Test case 1: Default case\n    x = torch.randn(4, 8, device='cuda', dtype=torch.float32)\n    dy = torch.randn(4, 8, device='cuda', dtype=torch.float32)\n    dx = _l2_norm_bwd(x, dy)\n    results['test_case_1'] = dx\n\n    # Test case 2: Different shape\n    x = torch.randn(2, 16, device='cuda', dtype=torch.float32)\n    dy = torch.randn(2, 16, device='cuda', dtype=torch.float32)\n    dx = _l2_norm_bwd(x, dy)\n    results['test_case_2'] = dx\n\n    # Test case 3: Larger tensor\n    x = torch.randn(8, 8, device='cuda', dtype=torch.float32)\n    dy = torch.randn(8, 8, device='cuda', dtype=torch.float32)\n    dx = _l2_norm_bwd(x, dy)\n    results['test_case_3'] = dx\n\n    # Test case 4: Edge case with small tensor\n    x = torch.randn(1, 8, device='cuda', dtype=torch.float32)\n    dy = torch.randn(1, 8, device='cuda', dtype=torch.float32)\n    dx = _l2_norm_bwd(x, dy)\n    results['test_case_4'] = dx\n\n    return results\n\n# Run the tests\nresult_gold = test_l2_norm_bwd()\n", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n\n@triton.jit\ndef _l2_norm_bwd_kernel(\n    X, DY, DX,\n    stride_x_row,\n    N,\n    eps,\n    BLOCK_N: tl.constexpr,\n):\n    row = tl.program_id(0)\n    X   += row * stride_x_row\n    DY  += row * stride_x_row\n    DX  += row * stride_x_row\n\n    cols = tl.arange(0, BLOCK_N)\n    mask = cols < N\n\n    x  = tl.load(X  + cols, mask=mask, other=0.0).to(tl.float32)\n    dy = tl.load(DY + cols, mask=mask, other=0.0).to(tl.float32)\n\n    var = tl.sum(x * x)\n    rstd = 1 / tl.sqrt(var + eps)\n\n    dx = dy * rstd - tl.sum(dy * x) * (1 / (var + eps)) * rstd * x\n    tl.store(DX + cols, dx, mask=mask)\n\n\ndef _l2_norm_bwd(x: torch.Tensor, dy: torch.Tensor, eps: float = 1e-5) -> torch.Tensor:\n    x_shape_og = x.shape\n    x = x.reshape(-1, x.shape[-1])\n    dy = dy.reshape(-1, dy.shape[-1])\n\n    if x.stride(-1) != 1:\n        x = x.contiguous()\n    if dy.stride(-1) != 1:\n        dy = dy.contiguous()\n\n    M, N = x.shape\n    MAX_FUSED_SIZE = 65536 // x.element_size()\n    BLOCK_N = min(MAX_FUSED_SIZE, triton.next_power_of_2(N))\n    if N > BLOCK_N:\n        raise RuntimeError(\"This layer norm doesn't support feature dim >= 64KB.\")\n    dx = torch.empty_like(x)\n\n    # ROCm-compatible grid launch\n    grid = (M,)\n    _l2_norm_bwd_kernel[grid](\n        x, dy, dx,\n        x.stride(0),\n        N,\n        eps,\n        BLOCK_N=BLOCK_N,\n    )\n    return dx.reshape(x_shape_og)\n"}, {"instruction": "You are a expert in writing Triton operators for efficient GPU programming. Use triton language write a kernel and wrapper according following instruction.\n            The Triton kernel `_l2_norm_fwd_1pass_kernel` aims to perform L2 normalization on a 2D input tensor `X`. It processes each row separately using Triton's parallel execution model. The kernel expects pointers to `X` and `Y` along with the stride for rows (`stride_x_row`), number of columns in `X` (`N`), a small constant `eps` to prevent division by zero, and a compile-time constant `BLOCK_N`. The kernel computes L2 normalization by first loading a block of data from `X`, calculating the sum of squares for variance, and computing the reciprocal of the square root of the variance plus `eps` to get `rstd`. It then multiplies the input block by `rstd` to produce the normalized values, which are stored in `Y`.\n\n            The Python function `_l2_norm_fwd` handles the setup and execution of the kernel. It first reshapes and possibly makes the input tensor `x` contiguous. It initializes an empty tensor `y` to store the output. The function calculates `BLOCK_N` based on `x`'s element size and ensures it doesn't exceed 64KB. If the feature dimension `N` is larger than `BLOCK_N`, it raises an error. The kernel is then launched with the total number of rows `M`, pointers to `x` and `y`, stride, number of columns, `eps`, and `BLOCK_N`. Finally, the function returns the normalized tensor reshaped to its original dimensions.\n            ", "label": null, "file": "l2_norm_triton1.py", "test_code": "\n\n\nimport torch\n\n# Test the forward L2 normalization\ndef test_l2_norm_fwd():\n    results = {}\n    \n    # Test case 1\n    x1 = torch.randn(4, 8, device='cuda', dtype=torch.float32)\n    y1 = _l2_norm_fwd(x1)\n    results['test_case_1'] = y1\n\n    # Test case 2: Different batch size\n    x2 = torch.randn(2, 8, device='cuda', dtype=torch.float32)\n    y2 = _l2_norm_fwd(x2)\n    results['test_case_2'] = y2\n\n    # Test case 3: Different feature size\n    x3 = torch.randn(4, 4, device='cuda', dtype=torch.float32)\n    y3 = _l2_norm_fwd(x3)\n    results['test_case_3'] = y3\n\n    # Test case 4: Larger tensor\n    x4 = torch.randn(8, 8, device='cuda', dtype=torch.float32)\n    y4 = _l2_norm_fwd(x4)\n    results['test_case_4'] = y4\n\n    return results\n\nresult_gold = test_l2_norm_fwd()\n", "predict": "\nimport torch\nimport triton\nimport triton.language as tl\n\n@triton.jit\ndef _l2_norm_fwd_1pass_kernel(\n    X,  # pointer to the input\n    Y,  # pointer to the output\n    stride_x_row,  # how much to increase the pointer when moving by 1 row\n    N,  # number of columns in X\n    eps,  # epsilon to avoid division by zero\n    BLOCK_N: tl.constexpr,\n):\n    row = tl.program_id(0)\n    X += row * stride_x_row\n    Y += row * stride_x_row\n\n    cols = tl.arange(0, BLOCK_N)\n\n    var = tl.zeros([], dtype=tl.float32)\n    for base in range(0, N, BLOCK_N):\n        mask = cols < (N - base)\n        data = tl.load(X + base + cols, mask=mask, other=0.0).to(tl.float32)\n        var += tl.sum(data * data)\n\n    rstd = tl.rsqrt(var + eps)\n\n    for base in range(0, N, BLOCK_N):\n        mask = cols < (N - base)\n        data = tl.load(X + base + cols, mask=mask, other=0.0).to(tl.float32)\n        y = data * rstd\n        tl.store(Y + base + cols, y, mask=mask)\n\ndef _l2_norm_fwd(x: torch.Tensor, eps: float = 1e-5):\n    x = x if x.is_contiguous() else x.contiguous()\n    original_shape = x.shape\n    if x.ndim > 2:\n        x = x.view(-1, x.shape[-1])\n    M, N = x.shape\n    y = torch.empty_like(x)\n\n    element_size = x.element_size()\n    BLOCK_N = min(65536 // element_size, triton.next_power_of_2(N))\n\n    grid = (M,)\n    _l2_norm_fwd_1pass_kernel[grid](\n        x,\n        y,\n        x.stride(0),\n        N,\n        eps,\n        BLOCK_N=BLOCK_N,\n    )\n    return y.view(original_shape)\n"}]